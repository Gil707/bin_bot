<?php
/**
 * Created by PhpStorm.
 * User: Gil
 * Date: 02-Feb-18
 * Time: 11:49
 */

namespace app\models;


use GuzzleHttp\Client;

class BinanceApp
{
    const API_URL = 'https://www.binance.com/';
    const API_VERSION = 'api/v1/';
    const API_VERSION_AUTH = 'api/v3/';
    const apiKey = '...';
    const apiSecret = '...';

    private static $instance = null;

    /**
     * API key.
     *
     * @var string
     */
    private $_apiKey;
    /**
     * API secret.
     *
     * @var string
     */
    private $_apiSecret;


    public function __construct($apiKey = BinanceApp::apiKey, $apiSecret = BinanceApp::apiSecret)
    {
        $this->_apiKey = $apiKey;
        $this->_apiSecret = $apiSecret;
    }

    public static function getInstance()
    {
        if (null === self::$instance)
        {
            self::$instance = new self();
        }
        return self::$instance;
    }

    private function __clone() {}

    public function getApiKey()
    {
        return $this->_apiKey;
    }

    public function getApiSecret()
    {
        return $this->_apiSecret;
    }

    public function getPrice()
    {
        return $this->runRequest('GET', 'ticker/price', 'NONE');
    }

    /**
     * Send order.
     *
     * @param array $params The data to send.
     * @option string "symbol"           The symbol to search for. (required)
     * @option string "side"             Order side enum. (required)
     * @option string "type"             Order type enum. (required)
     * @option string "timeInForce"      Time in force enum. (required)
     * @option double "quantity"         Desired quantity. (required)
     * @option double "price"            Asking price. (required)
     * @option string "newClientOrderId" A unique id for the order. Automatically generated by default.
     * @option double "stopPrice"        Used with STOP orders.
     * @option double "icebergQty"       Used with icebergOrders.
     * @option int    "timestamp"        A UNIX timestamp. (required)
     *
     * @return \Psr\Http\Message\StreamInterface
     */
    public function placeOrder($params)
    {
        return $this->runRequest('POST', 'order', 'SIGNED', $params);
    }

    public function placeOrderTest($params)
    {
        return $this->runRequest('POST', 'order/test', 'SIGNED', $params);
    }

    /**
     * Check an order's status.
     *
     * @param array $params The data to send.
     * @option string "symbol"            The symbol to search for. (required)
     * @option int    "orderId"           The order ID.
     * @option string "origClientOrderId" The original client order ID.
     * @option int    "timestamp"         A UNIX timestamp. (required)
     * @option int    "recvWindow"        The number of milliseconds after timestamp the request is valid for.
     *
     * @return
     */
    public function getOrder($params)
    {
        return $this->runRequest('GET', 'order', 'SIGNED', $params);
    }

    /**
     * Returns all account orders; active, canceled, or filled.
     *
     * @param array $params The data to send.
     * @option string "symbol"     The symbol to search for. (required)
     * @option int    "timestamp"  A UNIX timestamp. (required)
     * @option int    "limit"      The request limit, max value 500, min value 1.
     * @option int    "recvWindow" The number of milliseconds after timestamp the request is valid for.
     * @return \Psr\Http\Message\StreamInterface
     */
    public function getOrders($params)
    {
        return $this->runRequest('GET', 'openOrders', 'SIGNED', $params);
    }

    protected function runRequest($type, $uri, $securityType = 'NONE', $params = [])
    {
        $params = array_filter($params, 'strlen');
        switch (strtoupper($securityType)) {
            case 'API-KEY':
                $client = new Client(['headers' => ['X-MBX-APIKEY' => $this->_apiKey], 'http_errors' => false]);
                $url = BinanceApp::API_URL . BinanceApp::API_VERSION . $uri;
                break;
            case 'SIGNED':
                $client = new Client(['headers' => ['X-MBX-APIKEY' => $this->_apiKey], 'http_errors' => false]);
                $url = BinanceApp::API_URL . BinanceApp::API_VERSION_AUTH . $uri;
                $params['signature'] = hash_hmac('sha256', http_build_query($params), $this->_apiSecret);
                break;
            default:
                $client = new Client(['http_errors' => false]);
                $url = BinanceApp::API_URL . BinanceApp::API_VERSION . $uri;
                break;
        }
        switch (strtoupper($type)) {
            default:
            case 'GET':
                $params['query'] = $params;
                break;
            case 'POST':
            case 'PUT':
            case 'DELETE':
                $params['form_params'] = $params;
                break;
        }
        $response = $client->request(strtoupper($type), $url, $params);
        if ($response->getStatusCode() != 200) {
            var_dump($response->getStatusCode());
            sleep(5);
        }
        return $response->getBody();
    }

}